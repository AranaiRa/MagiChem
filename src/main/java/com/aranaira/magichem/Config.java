package com.aranaira.magichem;

import net.minecraft.resources.ResourceLocation;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.event.config.ModConfigEvent;
import net.minecraftforge.registries.ForgeRegistries;

// An example config class. This is not required, but it's a good idea to have one to keep your config organized.
// Demonstrates how to use Forge's config APIs
@Mod.EventBusSubscriber(modid = MagiChemMod.MODID, bus = Mod.EventBusSubscriber.Bus.MOD)
public class Config
{
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();

    //----------------GENERAL

    private static final ForgeConfigSpec.IntValue GRIME_PER_WASTE = BUILDER
            .comment("How much Grime is consumed to make a single unit of Alchemical Waste when cleaning an alchemical device.")
            .defineInRange("grimePerWaste", 700, 1, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue GRIME_PENALTY_POINT = BUILDER
            .comment("At what percent full of Grime that alchemical devices start to lose Efficiency and gain Operation Time.")
            .defineInRange("grimePenaltyPoint", 50, 1, 100);

    private static final ForgeConfigSpec.IntValue FLUID_PER_XP_POINT = BUILDER
            .comment("How many mB of Academic Slurry constitutes one experience point.")
            .defineInRange("fluidPerXPPoint", 40, 1, 1000);

    private static final ForgeConfigSpec.IntValue CONSTRUCT_STUDY_EXPERIENCE_SIMPLE = BUILDER
            .comment("How many experience points a Studying construct generates from simple study materials.")
            .defineInRange("constructStudyExperienceSimple", 2, 1, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue CONSTRUCT_STUDY_EXPERIENCE_ADVANCED = BUILDER
            .comment("How many experience points a Studying construct generates from advanced study materials.")
            .defineInRange("constructStudyExperienceAdvanced", 6, 2, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue CONSTRUCT_STUDY_EXPERIENCE_MASTER = BUILDER
            .comment("How many experience points a Studying construct generates from master study materials.")
            .defineInRange("constructStudyExperienceMaster", 18, 4, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue HOUSE_OF_ALCHEMY_DISTILLATION_EFFICIENCY_BONUS = BUILDER
            .comment("The Efficiency that Nigredo, Albedo, Citrinitas, and Rubedo receive during distillation. A percentage of the distance between the actual device Efficiency and 100% Efficiency.")
            .defineInRange("houseOfAlchemyDistillationEfficiencyBonus", 50, 0, 100);

    //----------------FIXATION PROCESS

    private static final ForgeConfigSpec.IntValue FIXATION_BASE_SLURRY_COST = BUILDER
            .comment("The amount of Academic Slurry, in mB, consumed to perform Fixation on a first-order Admixture.")
            .defineInRange("fixationBaseSlurryCost", 40, 10, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue FIXATION_SLURRY_COMPOUND_COST = BUILDER
            .comment("The percent cost increase over base that higher order Admixtures take to perform Fixation. This cost increase is multiplicative.")
            .defineInRange("fixationSlurryCompoundCost", 300, 10, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue FIXATION_FAILURE_REFUND = BUILDER
            .comment("The percent of the experience cost to perform Fixation that is reduced if the process fails.")
            .defineInRange("fixationFailureRefund", 70, 0, 100);

    //----------------ALEMBIC

    private static final ForgeConfigSpec.IntValue ALEMBIC_EFFICIENCY = BUILDER
            .comment("The baseline efficiency of an Alembic.")
            .defineInRange("alembicEfficiency", 30, 1, 100);

    private static final ForgeConfigSpec.IntValue ALEMBIC_OPERATION_TIME = BUILDER
            .comment("The time, in ticks, that it takes for an Alembic to process one object.")
            .defineInRange("alembicOperationTime", 200, 1, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue ALEMBIC_MAXIMUM_GRIME = BUILDER
            .comment("The maximum Grime level of the Alembic. ")
            .defineInRange("alembicGrimeMaximum", 24000, 100, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue ALEMBIC_GRIME_ON_SUCCESS = BUILDER
            .comment("The amount of Grime generated by a dram of materia that successfully distills.")
            .defineInRange("alembicGrimeOnSuccess", 75, 0, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue ALEMBIC_GRIME_ON_FAILURE = BUILDER
            .comment("The amount of Grime generated by a dram of materia that fails to distill.")
            .defineInRange("alembicGrimeOnFailure", 10, 0, Integer.MAX_VALUE);

    //----------------DISTILLERY

    private static final ForgeConfigSpec.IntValue DISTILLERY_EFFICIENCY = BUILDER
            .comment("The baseline efficiency of a Distillery.")
            .defineInRange("distilleryEfficiency", 35, 1, 100);

    private static final ForgeConfigSpec.IntValue DISTILLERY_OPERATION_TIME = BUILDER
            .comment("The time, in ticks, that it takes for a Distillery to process one object.")
            .defineInRange("distilleryOperationTime", 160, 1, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue DISTILLERY_MAXIMUM_GRIME = BUILDER
            .comment("The maximum Grime level of the Distillery. ")
            .defineInRange("distilleryGrimeMaximum", 40000, 100, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue DISTILLERY_GRIME_ON_SUCCESS = BUILDER
            .comment("The amount of Grime generated by a dram of materia that successfully distills.")
            .defineInRange("distilleryGrimeOnSuccess", 75, 0, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue DISTILLERY_GRIME_ON_FAILURE = BUILDER
            .comment("The amount of Grime generated by a dram of materia that fails to distill.")
            .defineInRange("distilleryGrimeOnFailure", 10, 0, Integer.MAX_VALUE);

    //----------------CENTRIFUGE

    private static final ForgeConfigSpec.IntValue CENTRIFUGE_EFFICIENCY = BUILDER
            .comment("The baseline efficiency of a Centrifuge.")
            .defineInRange("centrifugeEfficiency", 35, 1, 100);

    private static final ForgeConfigSpec.IntValue CENTRIFUGE_OPERATION_TIME = BUILDER
            .comment("The time, in ticks, that it takes for a Centrifuge to separate one admixture into component materia.")
            .defineInRange("centrifugeOperationTime", 160, 1, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue CENTRIFUGE_MAXIMUM_GRIME = BUILDER
            .comment("The maximum Grime level of the Centrifuge. ")
            .defineInRange("centrifugeGrimeMaximum", 40000, 100, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue CENTRIFUGE_GRIME_ON_SUCCESS = BUILDER
            .comment("The amount of Grime generated by an admixture that successfully separates in a Centrifuge.")
            .defineInRange("centrifugeGrimeOnSuccess", 75, 0, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue CENTRIFUGE_GRIME_ON_FAILURE = BUILDER
            .comment("The amount of Grime generated by an admixture that fails to separate in a Centrifuge.")
            .defineInRange("centrifugeGrimeOnFailure", 10, 0, Integer.MAX_VALUE);

    //----------------FUSERY

    private static final ForgeConfigSpec.IntValue FUSERY_EFFICIENCY = BUILDER
            .comment("The baseline efficiency of a Fusery.")
            .defineInRange("fuseryEfficiency", 35, 1, 100);

    private static final ForgeConfigSpec.IntValue FUSERY_OPERATION_TIME = BUILDER
            .comment("The time, in ticks, that it takes for an Admixer to make one admixture from its component materia.")
            .defineInRange("fuseryOperationTime", 160, 1, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue FUSERY_MAXIMUM_GRIME = BUILDER
            .comment("The maximum Grime level of the Fusery. ")
            .defineInRange("fuseryGrimeMaximum", 40000, 100, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue FUSERY_GRIME_ON_SUCCESS = BUILDER
            .comment("The amount of Grime generated by an admixture that successfully combines in a Fusery.")
            .defineInRange("fuseryGrimeOnSuccess", 75, 0, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue FUSERY_GRIME_ON_FAILURE = BUILDER
            .comment("The amount of Grime generated by an admixture that fails to combine in a Fusery.")
            .defineInRange("fuseryGrimeOnFailure", 10, 0, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue FUSERY_TANK_CAPACITY = BUILDER
            .comment("The amount of Academic Slurry, in mB, the Fusery's internal tank can hold.")
            .defineInRange("fuseryTankCapacity", 4000, 500, Integer.MAX_VALUE);

    //----------------GRAND DISTILLERY

    private static final ForgeConfigSpec.IntValue GRAND_DISTILLERY_EFFICIENCY = BUILDER
            .comment("The baseline efficiency of a Grand Distillery.")
            .defineInRange("grandDistilleryEfficiency", 60, 1, 100);

    private static final ForgeConfigSpec.IntValue GRAND_DISTILLERY_MAXIMUM_GRIME = BUILDER
            .comment("The maximum Grime level of the Grand Distillery. ")
            .defineInRange("grandDistilleryGrimeMaximum", 64000, 100, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue GRAND_DISTILLERY_GRIME_ON_SUCCESS = BUILDER
            .comment("The amount of Grime generated by a dram of materia that successfully distills.")
            .defineInRange("grandDistilleryGrimeOnSuccess", 75, 0, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue GRAND_DISTILLERY_GRIME_ON_FAILURE = BUILDER
            .comment("The amount of Grime generated by a dram of materia that fails to distill.")
            .defineInRange("grandDistilleryGrimeOnFailure", 10, 0, Integer.MAX_VALUE);

    //----------------ALCHEMICAL NEXUS

    private static final ForgeConfigSpec.IntValue ALCHEMICAL_NEXUS_TANK_CAPACITY = BUILDER
            .comment("The amount of Academic Slurry, in mB, the Alchemical Nexus's internal tank can hold.")
            .defineInRange("alchemicalNexusTankCapacity", 12000, 500, Integer.MAX_VALUE);

    //----------------CIRCLE OF POWER

    private static final ForgeConfigSpec.IntValue CIRCLE_OF_POWER_GEN_1_REAGENT = BUILDER
            .comment("How much FE/tick the Circle of Power generates when it has one reagent")
            .defineInRange("circlePowerGen1", 30, 1, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue CIRCLE_OF_POWER_GEN_2_REAGENT = BUILDER
            .comment("How much FE/tick the Circle of Power generates when it has two reagents")
            .defineInRange("circlePowerGen2", 360, 2, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue CIRCLE_OF_POWER_GEN_3_REAGENT = BUILDER
            .comment("How much FE/tick the Circle of Power generates when it has three reagents")
            .defineInRange("circlePowerGen3", 4320, 3, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue CIRCLE_OF_POWER_GEN_4_REAGENT = BUILDER
            .comment("How much FE/tick the Circle of Power generates when it has all four reagents")
            .defineInRange("circlePowerGen4", 51840, 4, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue CIRCLE_OF_POWER_BUFFER = BUILDER
            .comment("How many ticks of activity the Circle of Power stores at once")
            .defineInRange("circlePowerBuffer", 3, 1, 72000);

    //----------------CIRCLE OF FABRICATION

    //----------------MATERIA JAR

    private static final ForgeConfigSpec.IntValue MATERIA_JAR_ESSENTIA_CAPACITY = BUILDER
            .comment("How much of one type of Essentia can be stored inside of a Materia Jar.")
            .defineInRange("materiaJarEssentiaCapacity", 360, 64, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue MATERIA_JAR_ADMIXTURE_CAPACITY = BUILDER
            .comment("How much of one type of Admixture can be stored inside of a Materia Jar.")
            .defineInRange("materiaJarAdmixtureCapacity", 180, 64, Integer.MAX_VALUE);

    //----------------MATERIA VESSEL

    private static final ForgeConfigSpec.IntValue MATERIA_VESSEL_ESSENTIA_CAPACITY = BUILDER
            .comment("How much of one type of Essentia can be stored inside of a Materia Vessel.")
            .defineInRange("materiaVesselEssentiaCapacity", 3600, 64, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue MATERIA_VESSEL_ADMIXTURE_CAPACITY = BUILDER
            .comment("How much of one type of Admixture can be stored inside of a Materia Vessel.")
            .defineInRange("materiaVesselAdmixtureCapacity", 1800, 64, Integer.MAX_VALUE);

    //----------------GENERAL ACTUATORS

    private static final ForgeConfigSpec.IntValue ACTUATOR_SINGLE_SUPPLIED_PERIOD = BUILDER
            .comment("The amount of time, in ticks, that actuators take in between drawing Eldrin power or consuming materia units when only one of the two is present.")
            .defineInRange("actuatorSingleSuppliedPeriod", 300, 1, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue ACTUATOR_DOUBLE_SUPPLIED_PERIOD = BUILDER
            .comment("The amount of time, in ticks, that actuators take in between drawing Eldrin power and consuming materia units when both are present.")
            .defineInRange("actuatorDoubleSuppliedPeriod", 900, 1, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue ACTUATOR_MATERIA_BUFFER_MAXIMUM = BUILDER
            .comment("The amount of materia units that an actuator can store.")
            .defineInRange("actuatorMateriaBufferMaximum", 1000, 1, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue ACTUATOR_MATERIA_UNITS_PER_DRAM = BUILDER
            .comment("The number of materia units that an Actuator gets from a single dram of materia")
            .defineInRange("actuatorMateriaUnitsPerDram", 200, 1, Integer.MAX_VALUE);

    //----------------DELUGE PURIFIER

    private static final ForgeConfigSpec.IntValue DELUGE_PURIFIER_TANK_CAPACITY = BUILDER
            .comment("The amount of Water and Steam, in mB, the Deluge Purifier's internal tanks can hold.")
            .defineInRange("delugePurifierTankCapacity", 2000, 500, Integer.MAX_VALUE);

    //----------------INFERNO ENGINE

    private static final ForgeConfigSpec.IntValue INFERNO_ENGINE_TANK_CAPACITY = BUILDER
            .comment("The amount of Smoke, in mB, the Inferno Engine's internal tank can hold.")
            .defineInRange("infernoEngineTankCapacity", 2000, 500, Integer.MAX_VALUE);

    //----------------QUAKE REFINERY

    private static final ForgeConfigSpec.IntValue QUAKE_REFINERY_SAND_CAPACITY = BUILDER
            .comment("The amount of sand that can be stored in the Quake Refinery's internal buffer.")
            .defineInRange("quakeRefinerySandCapacity", 16000, 500, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue QUAKE_REFINERY_GRIME_CAPACITY = BUILDER
            .comment("The amount of Grime that can be stored in the Quake Refinery's internal buffer.")
            .defineInRange("quakeRefineryGrimeCapacity", 128000, 500, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue QUAKE_REFINERY_RAREFIED_RATE = BUILDER
            .comment("What percentage of Grime reduced by a Quake Refinery becomes Rarefied Waste instead of Alchemical Waste.")
            .defineInRange("quakeRefineryRarefiedRate", 60, 1, 100);

    //----------------GALE PRESSURIZER

    private static final ForgeConfigSpec.IntValue GALE_PRESSURIZER_TANK_CAPACITY = BUILDER
            .comment("The amount of Smoke and Steam, in mB, the Gale Pressurizer's internal tanks can hold.")
            .defineInRange("galePressurizerTankCapacity", 2000, 500, Integer.MAX_VALUE);

    //----------------OCCULT MATRIX

    private static final ForgeConfigSpec.IntValue OCCULT_MATRIX_TANK_CAPACITY = BUILDER
            .comment("The amount of Academic Slurry, in mB, the Gale Pressurizer's internal tanks can hold.")
            .defineInRange("occultMatrixTankCapacity", 72000, 500, Integer.MAX_VALUE);

    //----------------COLORING CAULDRON

    private static final ForgeConfigSpec.IntValue COLORING_CAULDRON_BASE_OPERATION_TIME = BUILDER
            .comment("The amount of time, in ticks, that it takes for a Coloring Cauldron with one dye to color an item. This time is exponentially reduced with more dyes down to a quarter at 15 dyes.")
            .defineInRange("coloringCauldronBaseOperationTime", 1200, 10, Integer.MAX_VALUE);

    //----------------VARIEGATOR

    private static final ForgeConfigSpec.IntValue VARIEGATOR_OPERATION_TIME_SLOW = BUILDER
            .comment("The amount of time, in ticks, a Variegator requires to dye something if there is insufficient dye/Admixture of Color.")
            .defineInRange("variegatorOperationTimeSlow", 1200, 1, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue VARIEGATOR_OPERATION_TIME_FAST = BUILDER
            .comment("The amount of time, in ticks, a Variegator requires to dye something if appropriate dye/Admixture of Color is provided.")
            .defineInRange("variegatorOperationTimeFast", 50, 1, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue VARIEGATOR_MATCHED_COLOR_TIME_DISCOUNT = BUILDER
            .comment("What percentage the crafting time is reduced by if both Admixture of Color and a full bar of the appropriate dye are present. This is linearly reduced with the fill of the dye gauge.")
            .defineInRange("variegatorMatchedColorTimeDiscount", 80, 0, 99);

    private static final ForgeConfigSpec.IntValue VARIEGATOR_MAX_DYE = BUILDER
            .comment("The number of units each of the Variegator's dye gauges can hold.")
            .defineInRange("variegatorMaxDye", 250, 1, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue VARIEGATOR_DYE_PER_ITEM = BUILDER
            .comment("How many units of dye each dye item inserted into the Variegator is worth.")
            .defineInRange("variegatorDyePerItem", 10, 1, 64);

    private static final ForgeConfigSpec.IntValue VARIEGATOR_MAX_ADMIXTURE = BUILDER
            .comment("The number of units the Variegator's Admixture of Color gauge can hold.")
            .defineInRange("variegatorMaxAdmixture", 600, 1, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue VARIEGATOR_ADMIXTURE_PER_ITEM = BUILDER
            .comment("How many units of dye each dram of Admixture of Color inserted into the Variegator is worth.")
            .defineInRange("variegatorAdmixturePerItem", 15, 1, 64);

    //----------------CONJURER

    private static final ForgeConfigSpec.IntValue CONJURER_MATERIA_CAPACITY = BUILDER
            .comment("The maximum capacity of the Conjurer's materia gauge.")
            .defineInRange("conjurerMateriaCapacity", 100, 1, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue CONJURER_POINTS_PER_DRAM = BUILDER
            .comment("The number of points that a single dram of materia adds to the materia gauge.")
            .defineInRange("conjurerPointsPerDram", 4, 1, Integer.MAX_VALUE);

    //----------------MATERIA MANIFEST

    private static final ForgeConfigSpec.IntValue MATERIA_MANIFEST_SIZE_CONSTRAINT = BUILDER
            .comment("The maximum length in any one axis that the Materia Manifest will allow from a Rune of Marking Pair.")
            .defineInRange("materiaManifestSizeConstraint", 40, 1, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue MATERIA_MANIFEST_DISTANCE_LIMIT = BUILDER
            .comment("The maximum distance from the center of the Rune of Marking Pair that a Materia Manifest can be. Set to 0 for no limit.")
            .defineInRange("materiaManifestDistanceLimit", 150, 0, Integer.MAX_VALUE);

    private static final ForgeConfigSpec.IntValue MATERIA_MANIFEST_DEFAULT_RANGE = BUILDER
            .comment("The default cuboid range that a Materia Manifest searches for containers in. The center block is not counted as part of this squadius.")
            .defineInRange("materiaManifestDefaultRange", 8, 1, Integer.MAX_VALUE);

    static final ForgeConfigSpec SPEC = BUILDER.build();

    public static int
        grimePerWaste,
        grimePenaltyPoint,
        fluidPerXPPoint,
        constructStudyExperienceSimple,
        constructStudyExperienceAdvanced,
        constructStudyExperienceMaster,
        houseOfAlchemyDistillationEfficiencyBonus,
        fixationBaseSlurryCost,
        fixationSlurryCompoundCost,
        fixationFailureRefund,
        alembicEfficiency,
        alembicOperationTime,
        alembicMaximumGrime,
        alembicGrimeOnSuccess,
        alembicGrimeOnFailure,
        distilleryEfficiency,
        distilleryOperationTime,
        distilleryMaximumGrime,
        distilleryGrimeOnSuccess,
        distilleryGrimeOnFailure,
        grandDistilleryEfficiency,
        grandDistilleryMaximumGrime,
        grandDistilleryGrimeOnSuccess,
        grandDistilleryGrimeOnFailure,
        centrifugeEfficiency,
        centrifugeOperationTime,
        centrifugeMaximumGrime,
        centrifugeGrimeOnSuccess,
        centrifugeGrimeOnFailure,
        fuseryEfficiency,
        fuseryOperationTime,
        fuseryMaximumGrime,
        fuseryGrimeOnSuccess,
        fuseryGrimeOnFailure,
        fuseryTankCapacity,
        alchemicalNexusTankCapacity,
        circlePowerGen1Reagent,
        circlePowerGen2Reagent,
        circlePowerGen3Reagent,
        circlePowerGen4Reagent,
        circlePowerBuffer,
        materiaJarEssentiaCapacity,
        materiaJarAdmixtureCapacity,
        materiaVesselEssentiaCapacity,
        materiaVesselAdmixtureCapacity,
        actuatorSingleSuppliedPeriod,
        actuatorDoubleSuppliedPeriod,
        actuatorMateriaBufferMaximum,
        actuatorMateriaUnitsPerDram,
        delugePurifierTankCapacity,
        infernoEngineTankCapacity,
        quakeRefinerySandCapacity,
        quakeRefineryGrimeCapacity,
        quakeRefineryRarefiedRate,
        galePressurizerTankCapacity,
        occultMatrixTankCapacity,
        coloringCauldronBaseOperationTime,
        variegatorOperationTimeSlow,
        variegatorOperationTimeFast,
        variegatorMatchedColorTimeDiscount,
        variegatorMaxDye,
        variegatorDyePerItem,
        variegatorMaxAdmixture,
        variegatorAdmixturePerItem,
        conjurerMateriaCapacity,
        conjurerPointsPerDram,
        materiaManifestSizeConstraint,
        materiaManifestDistanceLimit,
        materiaManifestDefaultRange;

    private static boolean validateItemName(final Object obj)
    {
        return obj instanceof final String itemName && ForgeRegistries.ITEMS.containsKey(new ResourceLocation(itemName));
    }

    @SubscribeEvent
    static void onLoad(final ModConfigEvent event)
    {
        grimePerWaste = GRIME_PER_WASTE.get();
        grimePenaltyPoint = GRIME_PENALTY_POINT.get();
        fluidPerXPPoint = FLUID_PER_XP_POINT.get();
        constructStudyExperienceSimple = CONSTRUCT_STUDY_EXPERIENCE_SIMPLE.get();
        constructStudyExperienceAdvanced = CONSTRUCT_STUDY_EXPERIENCE_ADVANCED.get();
        constructStudyExperienceMaster = CONSTRUCT_STUDY_EXPERIENCE_MASTER.get();
        houseOfAlchemyDistillationEfficiencyBonus = HOUSE_OF_ALCHEMY_DISTILLATION_EFFICIENCY_BONUS.get();
        fixationBaseSlurryCost = FIXATION_BASE_SLURRY_COST.get();
        fixationSlurryCompoundCost = FIXATION_SLURRY_COMPOUND_COST.get();
        fixationFailureRefund = FIXATION_FAILURE_REFUND.get();
        alembicEfficiency = ALEMBIC_EFFICIENCY.get();
        alembicOperationTime = ALEMBIC_OPERATION_TIME.get();
        alembicMaximumGrime = ALEMBIC_MAXIMUM_GRIME.get();
        alembicGrimeOnSuccess = ALEMBIC_GRIME_ON_SUCCESS.get();
        alembicGrimeOnFailure = ALEMBIC_GRIME_ON_FAILURE.get();
        distilleryEfficiency = DISTILLERY_EFFICIENCY.get();
        distilleryOperationTime = DISTILLERY_OPERATION_TIME.get();
        distilleryMaximumGrime = DISTILLERY_MAXIMUM_GRIME.get();
        distilleryGrimeOnSuccess = DISTILLERY_GRIME_ON_SUCCESS.get();
        distilleryGrimeOnFailure = DISTILLERY_GRIME_ON_FAILURE.get();
        centrifugeEfficiency = CENTRIFUGE_EFFICIENCY.get();
        centrifugeOperationTime = CENTRIFUGE_OPERATION_TIME.get();
        centrifugeMaximumGrime = CENTRIFUGE_MAXIMUM_GRIME.get();
        centrifugeGrimeOnSuccess = CENTRIFUGE_GRIME_ON_SUCCESS.get();
        centrifugeGrimeOnFailure = CENTRIFUGE_GRIME_ON_FAILURE.get();
        fuseryEfficiency = FUSERY_EFFICIENCY.get();
        fuseryOperationTime = FUSERY_OPERATION_TIME.get();
        fuseryMaximumGrime = FUSERY_MAXIMUM_GRIME.get();
        fuseryGrimeOnSuccess = FUSERY_GRIME_ON_SUCCESS.get();
        fuseryGrimeOnFailure = FUSERY_GRIME_ON_FAILURE.get();
        fuseryTankCapacity = FUSERY_TANK_CAPACITY.get();
        grandDistilleryEfficiency = GRAND_DISTILLERY_EFFICIENCY.get();
        grandDistilleryMaximumGrime = GRAND_DISTILLERY_MAXIMUM_GRIME.get();
        grandDistilleryGrimeOnSuccess = GRAND_DISTILLERY_GRIME_ON_SUCCESS.get();
        grandDistilleryGrimeOnFailure = GRAND_DISTILLERY_GRIME_ON_FAILURE.get();
        alchemicalNexusTankCapacity = ALCHEMICAL_NEXUS_TANK_CAPACITY.get();
        circlePowerGen1Reagent = CIRCLE_OF_POWER_GEN_1_REAGENT.get();
        circlePowerGen2Reagent = CIRCLE_OF_POWER_GEN_2_REAGENT.get();
        circlePowerGen3Reagent = CIRCLE_OF_POWER_GEN_3_REAGENT.get();
        circlePowerGen4Reagent = CIRCLE_OF_POWER_GEN_4_REAGENT.get();
        circlePowerBuffer = CIRCLE_OF_POWER_BUFFER.get();
        materiaJarEssentiaCapacity = MATERIA_JAR_ESSENTIA_CAPACITY.get();
        materiaJarAdmixtureCapacity = MATERIA_JAR_ADMIXTURE_CAPACITY.get();
        materiaVesselEssentiaCapacity = MATERIA_VESSEL_ESSENTIA_CAPACITY.get();
        materiaVesselAdmixtureCapacity = MATERIA_VESSEL_ADMIXTURE_CAPACITY.get();
        actuatorSingleSuppliedPeriod = ACTUATOR_SINGLE_SUPPLIED_PERIOD.get();
        actuatorDoubleSuppliedPeriod = ACTUATOR_DOUBLE_SUPPLIED_PERIOD.get();
        actuatorMateriaBufferMaximum = ACTUATOR_MATERIA_BUFFER_MAXIMUM.get();
        actuatorMateriaUnitsPerDram = ACTUATOR_MATERIA_UNITS_PER_DRAM.get();
        delugePurifierTankCapacity = DELUGE_PURIFIER_TANK_CAPACITY.get();
        infernoEngineTankCapacity = INFERNO_ENGINE_TANK_CAPACITY.get();
        quakeRefinerySandCapacity = QUAKE_REFINERY_SAND_CAPACITY.get();
        quakeRefineryGrimeCapacity = QUAKE_REFINERY_GRIME_CAPACITY.get();
        quakeRefineryRarefiedRate = QUAKE_REFINERY_RAREFIED_RATE.get();
        galePressurizerTankCapacity = GALE_PRESSURIZER_TANK_CAPACITY.get();
        occultMatrixTankCapacity = OCCULT_MATRIX_TANK_CAPACITY.get();
        coloringCauldronBaseOperationTime = COLORING_CAULDRON_BASE_OPERATION_TIME.get();
        variegatorOperationTimeSlow = VARIEGATOR_OPERATION_TIME_SLOW.get();
        variegatorOperationTimeFast = VARIEGATOR_OPERATION_TIME_FAST.get();
        variegatorMatchedColorTimeDiscount = VARIEGATOR_MATCHED_COLOR_TIME_DISCOUNT.get();
        variegatorMaxDye = VARIEGATOR_MAX_DYE.get();
        variegatorDyePerItem = VARIEGATOR_DYE_PER_ITEM.get();
        variegatorMaxAdmixture = VARIEGATOR_MAX_ADMIXTURE.get();
        variegatorAdmixturePerItem = VARIEGATOR_ADMIXTURE_PER_ITEM.get();
        conjurerMateriaCapacity = CONJURER_MATERIA_CAPACITY.get();
        conjurerPointsPerDram = CONJURER_POINTS_PER_DRAM.get();
        materiaManifestSizeConstraint = MATERIA_MANIFEST_SIZE_CONSTRAINT.get();
        materiaManifestDistanceLimit = MATERIA_MANIFEST_DISTANCE_LIMIT.get();
        materiaManifestDefaultRange = MATERIA_MANIFEST_DEFAULT_RANGE.get();
    }
}
